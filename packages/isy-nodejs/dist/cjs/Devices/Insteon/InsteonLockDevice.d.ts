import { InsteonBaseDevice } from './InsteonBaseDevice.js';
import 'winston';
declare const InsteonLockDevice_base: {
    new (...args: any[]): {
        local: import("../../ISYNode.js").DriverValues<import("../../Definitions/Global/Drivers.js").DriverType.Status | import("../../Definitions/Global/Drivers.js").Driver.Literal>;
        formatted: import("../../ISYNode.js").DriverValues<import("../../Definitions/Global/Drivers.js").DriverType.Status | import("../../Definitions/Global/Drivers.js").Driver.Literal, string>;
        pending: import("../../ISYNode.js").DriverValues<import("../../Definitions/Global/Drivers.js").DriverType.Status | import("../../Definitions/Global/Drivers.js").Driver.Literal>;
        get state(): Promise<boolean>;
        set state(value: boolean);
        On(): Promise<any>;
        Off(): Promise<any>;
        updateState(state: boolean): Promise<any>;
        logger(arg0: string): unknown;
        handleEvent(evt: any): unknown;
        on(arg0: string, arg1: any): unknown;
        name: any;
        uom: { [x in import("../../Definitions/Global/Drivers.js").Driver.Literal]?: import("../../Definitions/Global/UOM.js").UnitOfMeasure; };
        drivers: {
            ACCX?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ACCY?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ACCZ?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            AIRFLOW?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            AQI?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ALARM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ANGLPOS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ATMPRES?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ADRPST?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            AWAKE?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BARPRES?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BATLVL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BEEP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BPDIA?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BPSYS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BMI?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BONEM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BRT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CO?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CO2LVL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CTL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLISPC?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CC?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CPW?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLITEMP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CV?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV0?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV1?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV2?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV3?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV30?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV4?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV5?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV6?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV7?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV8?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV9?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV10?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV11?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV12?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV13?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV14?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV15?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV16?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV17?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV18?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV19?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV20?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV21?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV22?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV23?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV24?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV25?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV26?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV27?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV28?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GV29?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DELAY?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DEWPT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            BUSY?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SECMD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DIM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DISTANC?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WATERTD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DUR?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ELECCON?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ELECRES?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIEMD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ERR?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ETO?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TEMPEXH?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            FDDOWN?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            FDSTOP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            FDUP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIFRS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIFS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIFSO?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DFOF?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DFON?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CH20?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            FREQ?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GPV?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GVOL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            GUST?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIHCS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            HEATIX?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLISPH?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            HAIL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            HR?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIHUM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            LUMIN?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            METHANE?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            MODE?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            MOIST?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            MOON?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            MUSCLEM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DOF?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DOF3?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DOF4?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DOF5?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DON?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DON3?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DON4?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            DON5?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            OL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            OZONE?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            PM10?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            PM25?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            POP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            PPW?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            PF?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            PRECIP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            PULSCNT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            QUERY?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            RADON?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            RAINRT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            RELMOD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            RESET?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            RESPR?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            RFSS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ROTATE?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLISMD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SEISINT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SEISMAG?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SMOKED?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SOILH?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SOILR?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SOILS?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SOILT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SOLRAD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SVOL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            SPEED?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            ST?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TANKCAP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            USRNUM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            CLIMD?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TIDELVL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TIME?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TIMEREM?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TBW?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TPW?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            UV?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            UAC?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            VOCLVL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WATERF?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WATERP?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WATERT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WVOL?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WEIGHT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WINDCH?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WINDDIR?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            WATERTB?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
            TEMPOUT?: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>;
        } & {
            add(driver: import("../../Definitions/Global/Drivers.js").Driver<import("../../Definitions/Global/Drivers.js").DriverType>): void;
        };
        address: string;
        family: import("../../ISY.js").Family;
        typeCode: string;
        deviceClass: any;
        parentAddress: any;
        category: number;
        subCategory: number;
        type: any;
        _parentDevice: import("../../ISYNode.js").ISYDeviceNode<import("../../ISY.js").Family, import("../../Definitions/Global/Drivers.js").Driver.Literal, string>;
        children: import("../../ISYNode.js").ISYDeviceNode<import("../../ISY.js").Family, import("../../Definitions/Global/Drivers.js").Driver.Literal, string>[];
        scenes: import("../../ISYScene.js").ISYScene[];
        hidden: boolean;
        enabled: boolean;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        label: string;
        convertTo(value: any, UnitOfMeasure: number): any;
        convertTo(value: any, UnitOfMeasure: number, propertyName: import("../../Definitions/Global/Drivers.js").Driver.Literal): any;
        convertFrom(value: any, UnitOfMeasure: number): any;
        convertFrom(value: any, UnitOfMeasure: number, propertyName: import("../../Definitions/Global/Drivers.js").Driver.Literal): any;
        addLink(isyScene: import("../../ISYScene.js").ISYScene): void;
        addChild(childDevice: import("../../ISYNode.js").ISYDeviceNode<import("../../ISY.js").Family, import("../../Definitions/Global/Drivers.js").Driver.Literal, string>): void;
        readProperty(propertyName: import("../../Definitions/Global/Drivers.js").Driver.Literal): Promise<import("../../Model/DriverState.js").DriverState>;
        readProperties(): Promise<import("../../Model/DriverState.js").DriverState[]>;
        updateProperty(propertyName: import("../../Definitions/Global/Drivers.js").Driver.Literal, value: string): Promise<any>;
        sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        refreshNotes(): Promise<void>;
        parseResult(node: {
            property: import("../../Model/DriverState.js").DriverState | import("../../Model/DriverState.js").DriverState[];
        }): void;
        handleControlTrigger(controlName: string): boolean;
        handlePropertyChange(propertyName: import("../../Definitions/Global/Drivers.js").Driver.Literal, value: any, formattedValue: string): boolean;
    };
} & typeof InsteonBaseDevice;
export declare class InsteonLockDevice extends InsteonLockDevice_base {
    sendLockCommand(lockState: any, resultHandler: any): void;
    get isLocked(): Promise<boolean>;
    updateIsLocked(isLocked: boolean): Promise<any>;
    sendNonSecureLockCommand(lockState: any): Promise<any>;
    sendSecureLockCommand(lockState: any): Promise<any>;
}
export {};

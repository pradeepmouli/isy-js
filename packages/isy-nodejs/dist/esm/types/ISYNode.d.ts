import { EventEmitter } from 'events';
import { Family } from './Definitions/Global/Families.js';
import { DriverType, DriverList, Driver } from './Definitions/Global/Drivers.js';
import { ISY, ISYScene, NodeType } from './ISY.js';
import { PropertyChangedEventEmitter } from './Utils.js';
import { Logger } from 'winston';
import { NodeInfo } from './Model/NodeInfo.js';
import { DriverState } from './Model/DriverState.js';
import { UnitOfMeasure } from './Definitions/Global/UOM.js';
import type { DriversOf } from './Model/ClusterMap.js';
interface Node {
    flag?: any;
    nodeDefId?: string;
    address?: string;
    name?: string;
    family?: Family;
    parent?: any;
    enabled?: boolean;
    ELK_ID?: string;
}
export interface NodeNotes {
    location: string;
    spoken: string;
}
export type DriverValues<DK extends string = DriverType.Status, V = any> = {
    [x in DK]?: V;
};
export declare class ISYNode<D extends Driver.Literal = Driver.Literal> extends EventEmitter implements PropertyChangedEventEmitter {
    readonly isy: ISY;
    readonly formatted: DriverValues<D, string>;
    readonly uom: {
        [x in Driver.Literal]?: UnitOfMeasure;
    };
    readonly pending: DriverValues<D>;
    readonly local: DriverValues<D>;
    readonly drivers: DriverList<D>;
    readonly flag: any;
    readonly nodeDefId: string;
    readonly address: string;
    name: string;
    label: string;
    spokenName: string;
    location: string;
    isLoad: boolean;
    folder: string;
    parent: any;
    parentType: NodeType;
    readonly elkId: string;
    nodeType: number;
    readonly baseLabel: string;
    propsInitialized: boolean;
    logger: (msg: any, level?: "error" | "warn" | "debug" | "info", ...meta: any[]) => Logger;
    lastChanged: Date;
    enabled: boolean;
    baseName: any;
    family: Family;
    constructor(isy: ISY, node: Node);
    handlePropertyChange(propertyName: string, value: any, formattedValue: string): boolean;
    handleControlTrigger(controlName: string): boolean;
    on(event: "PropertyChanged" | "ControlTriggered", listener: ((propertyName: string, newValue: any, oldValue: any, formattedValue: string) => any) | ((controlName: string) => any)): this;
    emit(event: "PropertyChanged" | "ControlTriggered", propertyName?: string, newValue?: any, oldValue?: any, formattedValue?: string, controlName?: string): boolean;
    handleEvent(event: {
        control?: any;
        data?: any;
        node?: any;
        action?: any;
        fmtAct?: any;
    }): boolean;
    static _displayNameFunction: Function;
    generateLabel(template: string): string;
    refreshNotes(): Promise<void>;
    getNotes(): Promise<NodeNotes>;
}
export interface ISYDevice<T extends Family, D extends Driver.Literal = Driver.Literal, C extends string = string> {
    logger(arg0: string): unknown;
    handleEvent(evt: any): unknown;
    on(arg0: string, arg1: any): unknown;
    name: any;
    formatted: DriverValues<D, string>;
    uom: {
        [x in Driver.Literal]?: UnitOfMeasure;
    };
    pending: DriverValues<D>;
    local: DriverValues<D>;
    drivers: DriverList<D>;
    address: string;
    family: T;
    typeCode: string;
    deviceClass: any;
    parentAddress: any;
    category: number;
    subCategory: number;
    type: any;
    _parentDevice: ISYDeviceNode<T, Driver.Literal, string>;
    children: Array<ISYDeviceNode<T, Driver.Literal, string>>;
    scenes: ISYScene[];
    hidden: boolean;
    enabled: boolean;
    productName: string;
    model: string;
    modelNumber: string;
    version: string;
    isDimmable: boolean;
    label: string;
    convertTo(value: any, UnitOfMeasure: number): any;
    convertTo(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
    convertFrom(value: any, UnitOfMeasure: number): any;
    convertFrom(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
    addLink(isyScene: ISYScene): void;
    addChild(childDevice: ISYDeviceNode<T, Driver.Literal, string>): void;
    readProperty(propertyName: D): Promise<DriverState>;
    readProperties(): Promise<DriverState[]>;
    updateProperty(propertyName: D, value: string): Promise<any>;
    sendCommand(command: C, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
    refresh(): Promise<any>;
    refreshNotes(): Promise<void>;
    parseResult(node: {
        property: DriverState | DriverState[];
    }): void;
    handleControlTrigger(controlName: C): boolean;
    handlePropertyChange(propertyName: D, value: any, formattedValue: string): boolean;
}
type NodeList = ISYNode<any>[];
export type MapOf<T extends NodeList> = T extends [infer F extends ISYNode<any>] ? DriversOf<F> : T extends [infer F extends ISYNode<any>, ...infer R extends NodeList] ? DriversOf<F> | MapOf<R> : [];
type D = DriversOf<ISYNode<"ST">>;
export declare class ISYMultiNodeDevice<T extends Family, L extends [ISYNode<DriverType.Status>, ISYNode<"ST">, ISYNode<"SECMD">]> implements ISYDevice<T, Driver.Literal, string> {
    logger(arg0: string): unknown;
    handleEvent(evt: any): unknown;
    enabled: boolean;
    refreshNotes(): Promise<void>;
    address: string;
    on(arg0: string, arg1: any): unknown;
    name: any;
    label: string;
    formatted: {
        ACCX?: any;
        ACCY?: any;
        ACCZ?: any;
        AIRFLOW?: any;
        AQI?: any;
        ALARM?: any;
        ANGLPOS?: any;
        ATMPRES?: any;
        ADRPST?: any;
        AWAKE?: any;
        BARPRES?: any;
        BATLVL?: any;
        BEEP?: any;
        BPDIA?: any;
        BPSYS?: any;
        BMI?: any;
        BONEM?: any;
        BRT?: any;
        CO?: any;
        CO2LVL?: any;
        CTL?: any;
        CLISPC?: any;
        CC?: any;
        CPW?: any;
        CLITEMP?: any;
        CV?: any;
        GV0?: any;
        GV1?: any;
        GV2?: any;
        GV3?: any;
        GV30?: any;
        GV4?: any;
        GV5?: any;
        GV6?: any;
        GV7?: any;
        GV8?: any;
        GV9?: any;
        GV10?: any;
        GV11?: any;
        GV12?: any;
        GV13?: any;
        GV14?: any;
        GV15?: any;
        GV16?: any;
        GV17?: any;
        GV18?: any;
        GV19?: any;
        GV20?: any;
        GV21?: any;
        GV22?: any;
        GV23?: any;
        GV24?: any;
        GV25?: any;
        GV26?: any;
        GV27?: any;
        GV28?: any;
        GV29?: any;
        DELAY?: any;
        DEWPT?: any;
        BUSY?: any;
        SECMD?: any;
        DIM?: any;
        DISTANC?: any;
        WATERTD?: any;
        DUR?: any;
        ELECCON?: any;
        ELECRES?: any;
        CLIEMD?: any;
        ERR?: any;
        ETO?: any;
        TEMPEXH?: any;
        FDDOWN?: any;
        FDSTOP?: any;
        FDUP?: any;
        CLIFRS?: any;
        CLIFS?: any;
        CLIFSO?: any;
        DFOF?: any;
        DFON?: any;
        CH20?: any;
        FREQ?: any;
        GPV?: any;
        GVOL?: any;
        GUST?: any;
        CLIHCS?: any;
        HEATIX?: any;
        CLISPH?: any;
        HAIL?: any;
        HR?: any;
        CLIHUM?: any;
        LUMIN?: any;
        METHANE?: any;
        MODE?: any;
        MOIST?: any;
        MOON?: any;
        MUSCLEM?: any;
        DOF?: any;
        DOF3?: any;
        DOF4?: any;
        DOF5?: any;
        DON?: any;
        DON3?: any;
        DON4?: any;
        DON5?: any;
        OL?: any;
        OZONE?: any;
        PM10?: any;
        PM25?: any;
        POP?: any;
        PPW?: any;
        PF?: any;
        PRECIP?: any;
        PULSCNT?: any;
        QUERY?: any;
        RADON?: any;
        RAINRT?: any;
        RELMOD?: any;
        RESET?: any;
        RESPR?: any;
        RFSS?: any;
        ROTATE?: any;
        CLISMD?: any;
        SEISINT?: any;
        SEISMAG?: any;
        SMOKED?: any;
        SOILH?: any;
        SOILR?: any;
        SOILS?: any;
        SOILT?: any;
        SOLRAD?: any;
        SVOL?: any;
        SPEED?: any;
        ST?: any;
        TANKCAP?: any;
        USRNUM?: any;
        CLIMD?: any;
        TIDELVL?: any;
        TIME?: any;
        TIMEREM?: any;
        TBW?: any;
        TPW?: any;
        UV?: any;
        UAC?: any;
        VOCLVL?: any;
        WATERF?: any;
        WATERP?: any;
        WATERT?: any;
        WVOL?: any;
        WEIGHT?: any;
        WINDCH?: any;
        WINDDIR?: any;
        WATERTB?: any;
        TEMPOUT?: any;
    };
    uom: {
        ACCX?: UnitOfMeasure;
        ACCY?: UnitOfMeasure;
        ACCZ?: UnitOfMeasure;
        AIRFLOW?: UnitOfMeasure;
        AQI?: UnitOfMeasure;
        ALARM?: UnitOfMeasure;
        ANGLPOS?: UnitOfMeasure;
        ATMPRES?: UnitOfMeasure;
        ADRPST?: UnitOfMeasure;
        AWAKE?: UnitOfMeasure;
        BARPRES?: UnitOfMeasure;
        BATLVL?: UnitOfMeasure;
        BEEP?: UnitOfMeasure;
        BPDIA?: UnitOfMeasure;
        BPSYS?: UnitOfMeasure;
        BMI?: UnitOfMeasure;
        BONEM?: UnitOfMeasure;
        BRT?: UnitOfMeasure;
        CO?: UnitOfMeasure;
        CO2LVL?: UnitOfMeasure;
        CTL?: UnitOfMeasure;
        CLISPC?: UnitOfMeasure;
        CC?: UnitOfMeasure;
        CPW?: UnitOfMeasure;
        CLITEMP?: UnitOfMeasure;
        CV?: UnitOfMeasure;
        GV0?: UnitOfMeasure;
        GV1?: UnitOfMeasure;
        GV2?: UnitOfMeasure;
        GV3?: UnitOfMeasure;
        GV30?: UnitOfMeasure;
        GV4?: UnitOfMeasure;
        GV5?: UnitOfMeasure;
        GV6?: UnitOfMeasure;
        GV7?: UnitOfMeasure;
        GV8?: UnitOfMeasure;
        GV9?: UnitOfMeasure;
        GV10?: UnitOfMeasure;
        GV11?: UnitOfMeasure;
        GV12?: UnitOfMeasure;
        GV13?: UnitOfMeasure;
        GV14?: UnitOfMeasure;
        GV15?: UnitOfMeasure;
        GV16?: UnitOfMeasure;
        GV17?: UnitOfMeasure;
        GV18?: UnitOfMeasure;
        GV19?: UnitOfMeasure;
        GV20?: UnitOfMeasure;
        GV21?: UnitOfMeasure;
        GV22?: UnitOfMeasure;
        GV23?: UnitOfMeasure;
        GV24?: UnitOfMeasure;
        GV25?: UnitOfMeasure;
        GV26?: UnitOfMeasure;
        GV27?: UnitOfMeasure;
        GV28?: UnitOfMeasure;
        GV29?: UnitOfMeasure;
        DELAY?: UnitOfMeasure;
        DEWPT?: UnitOfMeasure;
        BUSY?: UnitOfMeasure;
        SECMD?: UnitOfMeasure;
        DIM?: UnitOfMeasure;
        DISTANC?: UnitOfMeasure;
        WATERTD?: UnitOfMeasure;
        DUR?: UnitOfMeasure;
        ELECCON?: UnitOfMeasure;
        ELECRES?: UnitOfMeasure;
        CLIEMD?: UnitOfMeasure;
        ERR?: UnitOfMeasure;
        ETO?: UnitOfMeasure;
        TEMPEXH?: UnitOfMeasure;
        FDDOWN?: UnitOfMeasure;
        FDSTOP?: UnitOfMeasure;
        FDUP?: UnitOfMeasure;
        CLIFRS?: UnitOfMeasure;
        CLIFS?: UnitOfMeasure;
        CLIFSO?: UnitOfMeasure;
        DFOF?: UnitOfMeasure;
        DFON?: UnitOfMeasure;
        CH20?: UnitOfMeasure;
        FREQ?: UnitOfMeasure;
        GPV?: UnitOfMeasure;
        GVOL?: UnitOfMeasure;
        GUST?: UnitOfMeasure;
        CLIHCS?: UnitOfMeasure;
        HEATIX?: UnitOfMeasure;
        CLISPH?: UnitOfMeasure;
        HAIL?: UnitOfMeasure;
        HR?: UnitOfMeasure;
        CLIHUM?: UnitOfMeasure;
        LUMIN?: UnitOfMeasure;
        METHANE?: UnitOfMeasure;
        MODE?: UnitOfMeasure;
        MOIST?: UnitOfMeasure;
        MOON?: UnitOfMeasure;
        MUSCLEM?: UnitOfMeasure;
        DOF?: UnitOfMeasure;
        DOF3?: UnitOfMeasure;
        DOF4?: UnitOfMeasure;
        DOF5?: UnitOfMeasure;
        DON?: UnitOfMeasure;
        DON3?: UnitOfMeasure;
        DON4?: UnitOfMeasure;
        DON5?: UnitOfMeasure;
        OL?: UnitOfMeasure;
        OZONE?: UnitOfMeasure;
        PM10?: UnitOfMeasure;
        PM25?: UnitOfMeasure;
        POP?: UnitOfMeasure;
        PPW?: UnitOfMeasure;
        PF?: UnitOfMeasure;
        PRECIP?: UnitOfMeasure;
        PULSCNT?: UnitOfMeasure;
        QUERY?: UnitOfMeasure;
        RADON?: UnitOfMeasure;
        RAINRT?: UnitOfMeasure;
        RELMOD?: UnitOfMeasure;
        RESET?: UnitOfMeasure;
        RESPR?: UnitOfMeasure;
        RFSS?: UnitOfMeasure;
        ROTATE?: UnitOfMeasure;
        CLISMD?: UnitOfMeasure;
        SEISINT?: UnitOfMeasure;
        SEISMAG?: UnitOfMeasure;
        SMOKED?: UnitOfMeasure;
        SOILH?: UnitOfMeasure;
        SOILR?: UnitOfMeasure;
        SOILS?: UnitOfMeasure;
        SOILT?: UnitOfMeasure;
        SOLRAD?: UnitOfMeasure;
        SVOL?: UnitOfMeasure;
        SPEED?: UnitOfMeasure;
        ST?: UnitOfMeasure;
        TANKCAP?: UnitOfMeasure;
        USRNUM?: UnitOfMeasure;
        CLIMD?: UnitOfMeasure;
        TIDELVL?: UnitOfMeasure;
        TIME?: UnitOfMeasure;
        TIMEREM?: UnitOfMeasure;
        TBW?: UnitOfMeasure;
        TPW?: UnitOfMeasure;
        UV?: UnitOfMeasure;
        UAC?: UnitOfMeasure;
        VOCLVL?: UnitOfMeasure;
        WATERF?: UnitOfMeasure;
        WATERP?: UnitOfMeasure;
        WATERT?: UnitOfMeasure;
        WVOL?: UnitOfMeasure;
        WEIGHT?: UnitOfMeasure;
        WINDCH?: UnitOfMeasure;
        WINDDIR?: UnitOfMeasure;
        WATERTB?: UnitOfMeasure;
        TEMPOUT?: UnitOfMeasure;
    };
    pending: DriverValues<Driver.Literal>;
    local: DriverValues<Driver.Literal>;
    drivers: DriverList<Driver.Literal>;
    family: T;
    typeCode: string;
    deviceClass: any;
    parentAddress: any;
    category: number;
    subCategory: number;
    type: any;
    _parentDevice: ISYDeviceNode<T, Driver.Literal, string>;
    children: ISYDeviceNode<T, Driver.Literal, string>[];
    scenes: ISYScene[];
    hidden: boolean;
    _enabled: any;
    productName: string;
    model: string;
    modelNumber: string;
    version: string;
    isDimmable: boolean;
    convertTo(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): void;
    convertFrom(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): void;
    addLink(isyScene: ISYScene): void;
    addChild(childDevice: ISYDeviceNode<T, Driver.Literal, string>): void;
    readProperty(propertyName: D): Promise<DriverState>;
    readProperties(): Promise<DriverState[]>;
    updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
    sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
    refresh(): Promise<any>;
    parseResult(node: {
        property: DriverState | DriverState[];
    }): void;
    handleControlTrigger(controlName: string): boolean;
    handlePropertyChange(propertyName: Driver.Literal, value: any, formattedValue: string): boolean;
}
export declare class ISYDeviceNode<T extends Family, D extends Driver.Literal, C extends string> extends ISYNode<D> implements ISYDevice<T, D, C> {
    family: T;
    readonly typeCode: string;
    readonly deviceClass: any;
    readonly parentAddress: any;
    readonly category: number;
    readonly subCategory: number;
    readonly type: any;
    _parentDevice: ISYDeviceNode<T, Driver.Literal, string>;
    readonly children: Array<ISYDeviceNode<T, Driver.Literal, string>>;
    readonly scenes: ISYScene[];
    hidden: boolean;
    _enabled: any;
    productName: string;
    model: string;
    modelNumber: string;
    version: string;
    isDimmable: boolean;
    constructor(isy: ISY, node: NodeInfo);
    convertTo(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): any;
    convertFrom(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): any;
    addLink(isyScene: ISYScene): void;
    addChild<K extends ISYDeviceNode<T, any, any>>(childDevice: K): void;
    get parentDevice(): ISYDeviceNode<T, Driver.Literal, string>;
    readProperty(propertyName: Driver.Literal): Promise<DriverState>;
    readProperties(): Promise<DriverState[]>;
    updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
    sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
    refresh(): Promise<any>;
    parseResult(node: {
        property: DriverState | DriverState[];
    }): void;
    applyStatus(prop: DriverState): void;
    handleControlTrigger(controlName: string): boolean;
    handlePropertyChange(driver: any, value: any, formattedValue: string): boolean;
}
export {};
//# sourceMappingURL=ISYNode.d.ts.map
import { ISY } from '../../ISY.js';
import { NodeInfo } from '../../Model/NodeInfo.js';
import { MapsTo } from '../MapsTo.js';
import { EndpointFor } from '../EndpointFor.js';
import { InsteonBaseDevice } from './InsteonBaseDevice.js';
import type { OnOffBehavior } from '@project-chip/matter.js/behaviors/on-off';
import 'winston';
import { Driver, DriverType } from '../../Definitions/Global/Drivers.js';
declare const InsteonRelayDevice_base: {
    new (...args: any[]): {
        local: import("../../ISYNode.js").DriverValues<DriverType.Status | Driver.Literal>;
        formatted: import("../../ISYNode.js").DriverValues<DriverType.Status | Driver.Literal, string>;
        pending: import("../../ISYNode.js").DriverValues<DriverType.Status | Driver.Literal>;
        get state(): Promise<boolean>;
        set state(value: boolean);
        On(): Promise<any>;
        Off(): Promise<any>;
        updateState(state: boolean): Promise<any>;
        logger(arg0: string): unknown;
        handleEvent(evt: any): unknown;
        on(arg0: string, arg1: any): unknown;
        name: any;
        uom: { [x in Driver.Literal]?: import("../../Definitions/Global/UOM.js").UnitOfMeasure; };
        drivers: {
            ACCX?: Driver<DriverType>;
            ACCY?: Driver<DriverType>;
            ACCZ?: Driver<DriverType>;
            AIRFLOW?: Driver<DriverType>;
            AQI?: Driver<DriverType>;
            ALARM?: Driver<DriverType>;
            ANGLPOS?: Driver<DriverType>;
            ATMPRES?: Driver<DriverType>;
            ADRPST?: Driver<DriverType>;
            AWAKE?: Driver<DriverType>;
            BARPRES?: Driver<DriverType>;
            BATLVL?: Driver<DriverType>;
            BEEP?: Driver<DriverType>;
            BPDIA?: Driver<DriverType>;
            BPSYS?: Driver<DriverType>;
            BMI?: Driver<DriverType>;
            BONEM?: Driver<DriverType>;
            BRT?: Driver<DriverType>;
            CO?: Driver<DriverType>;
            CO2LVL?: Driver<DriverType>;
            CTL?: Driver<DriverType>;
            CLISPC?: Driver<DriverType>;
            CC?: Driver<DriverType>;
            CPW?: Driver<DriverType>;
            CLITEMP?: Driver<DriverType>;
            CV?: Driver<DriverType>;
            GV0?: Driver<DriverType>;
            GV1?: Driver<DriverType>;
            GV2?: Driver<DriverType>;
            GV3?: Driver<DriverType>;
            GV30?: Driver<DriverType>;
            GV4?: Driver<DriverType>;
            GV5?: Driver<DriverType>;
            GV6?: Driver<DriverType>;
            GV7?: Driver<DriverType>;
            GV8?: Driver<DriverType>;
            GV9?: Driver<DriverType>;
            GV10?: Driver<DriverType>;
            GV11?: Driver<DriverType>;
            GV12?: Driver<DriverType>;
            GV13?: Driver<DriverType>;
            GV14?: Driver<DriverType>;
            GV15?: Driver<DriverType>;
            GV16?: Driver<DriverType>;
            GV17?: Driver<DriverType>;
            GV18?: Driver<DriverType>;
            GV19?: Driver<DriverType>;
            GV20?: Driver<DriverType>;
            GV21?: Driver<DriverType>;
            GV22?: Driver<DriverType>;
            GV23?: Driver<DriverType>;
            GV24?: Driver<DriverType>;
            GV25?: Driver<DriverType>;
            GV26?: Driver<DriverType>;
            GV27?: Driver<DriverType>;
            GV28?: Driver<DriverType>;
            GV29?: Driver<DriverType>;
            DELAY?: Driver<DriverType>;
            DEWPT?: Driver<DriverType>;
            BUSY?: Driver<DriverType>;
            SECMD?: Driver<DriverType>;
            DIM?: Driver<DriverType>;
            DISTANC?: Driver<DriverType>;
            WATERTD?: Driver<DriverType>;
            DUR?: Driver<DriverType>;
            ELECCON?: Driver<DriverType>;
            ELECRES?: Driver<DriverType>;
            CLIEMD?: Driver<DriverType>;
            ERR?: Driver<DriverType>;
            ETO?: Driver<DriverType>;
            TEMPEXH?: Driver<DriverType>;
            FDDOWN?: Driver<DriverType>;
            FDSTOP?: Driver<DriverType>;
            FDUP?: Driver<DriverType>;
            CLIFRS?: Driver<DriverType>;
            CLIFS?: Driver<DriverType>;
            CLIFSO?: Driver<DriverType>;
            DFOF?: Driver<DriverType>;
            DFON?: Driver<DriverType>;
            CH20?: Driver<DriverType>;
            FREQ?: Driver<DriverType>;
            GPV?: Driver<DriverType>;
            GVOL?: Driver<DriverType>;
            GUST?: Driver<DriverType>;
            CLIHCS?: Driver<DriverType>;
            HEATIX?: Driver<DriverType>;
            CLISPH?: Driver<DriverType>;
            HAIL?: Driver<DriverType>;
            HR?: Driver<DriverType>;
            CLIHUM?: Driver<DriverType>;
            LUMIN?: Driver<DriverType>;
            METHANE?: Driver<DriverType>;
            MODE?: Driver<DriverType>;
            MOIST?: Driver<DriverType>;
            MOON?: Driver<DriverType>;
            MUSCLEM?: Driver<DriverType>;
            DOF?: Driver<DriverType>;
            DOF3?: Driver<DriverType>;
            DOF4?: Driver<DriverType>;
            DOF5?: Driver<DriverType>;
            DON?: Driver<DriverType>;
            DON3?: Driver<DriverType>;
            DON4?: Driver<DriverType>;
            DON5?: Driver<DriverType>;
            OL?: Driver<DriverType>;
            OZONE?: Driver<DriverType>;
            PM10?: Driver<DriverType>;
            PM25?: Driver<DriverType>;
            POP?: Driver<DriverType>;
            PPW?: Driver<DriverType>;
            PF?: Driver<DriverType>;
            PRECIP?: Driver<DriverType>;
            PULSCNT?: Driver<DriverType>;
            QUERY?: Driver<DriverType>;
            RADON?: Driver<DriverType>;
            RAINRT?: Driver<DriverType>;
            RELMOD?: Driver<DriverType>;
            RESET?: Driver<DriverType>;
            RESPR?: Driver<DriverType>;
            RFSS?: Driver<DriverType>;
            ROTATE?: Driver<DriverType>;
            CLISMD?: Driver<DriverType>;
            SEISINT?: Driver<DriverType>;
            SEISMAG?: Driver<DriverType>;
            SMOKED?: Driver<DriverType>;
            SOILH?: Driver<DriverType>;
            SOILR?: Driver<DriverType>;
            SOILS?: Driver<DriverType>;
            SOILT?: Driver<DriverType>;
            SOLRAD?: Driver<DriverType>;
            SVOL?: Driver<DriverType>;
            SPEED?: Driver<DriverType>;
            ST?: Driver<DriverType>;
            TANKCAP?: Driver<DriverType>;
            USRNUM?: Driver<DriverType>;
            CLIMD?: Driver<DriverType>;
            TIDELVL?: Driver<DriverType>;
            TIME?: Driver<DriverType>;
            TIMEREM?: Driver<DriverType>;
            TBW?: Driver<DriverType>;
            TPW?: Driver<DriverType>;
            UV?: Driver<DriverType>;
            UAC?: Driver<DriverType>;
            VOCLVL?: Driver<DriverType>;
            WATERF?: Driver<DriverType>;
            WATERP?: Driver<DriverType>;
            WATERT?: Driver<DriverType>;
            WVOL?: Driver<DriverType>;
            WEIGHT?: Driver<DriverType>;
            WINDCH?: Driver<DriverType>;
            WINDDIR?: Driver<DriverType>;
            WATERTB?: Driver<DriverType>;
            TEMPOUT?: Driver<DriverType>;
        } & {
            add(driver: Driver<DriverType>): void;
        };
        address: string;
        family: import("../../ISY.js").Family;
        typeCode: string;
        deviceClass: any;
        parentAddress: any;
        category: number;
        subCategory: number;
        type: any;
        _parentDevice: import("../../ISYNode.js").ISYDeviceNode<import("../../ISY.js").Family, Driver.Literal, string>;
        children: import("../../ISYNode.js").ISYDeviceNode<import("../../ISY.js").Family, Driver.Literal, string>[];
        scenes: import("../../ISYScene.js").ISYScene[];
        hidden: boolean;
        enabled: boolean;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        label: string;
        convertTo(value: any, UnitOfMeasure: number): any;
        convertTo(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
        convertFrom(value: any, UnitOfMeasure: number): any;
        convertFrom(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
        addLink(isyScene: import("../../ISYScene.js").ISYScene): void;
        addChild(childDevice: import("../../ISYNode.js").ISYDeviceNode<import("../../ISY.js").Family, Driver.Literal, string>): void;
        readProperty(propertyName: Driver.Literal): Promise<import("../../Model/DriverState.js").DriverState>;
        readProperties(): Promise<import("../../Model/DriverState.js").DriverState[]>;
        updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
        sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        refreshNotes(): Promise<void>;
        parseResult(node: {
            property: import("../../Model/DriverState.js").DriverState | import("../../Model/DriverState.js").DriverState[];
        }): void;
        handleControlTrigger(controlName: string): boolean;
        handlePropertyChange(propertyName: Driver.Literal, value: any, formattedValue: string): boolean;
    };
} & typeof InsteonBaseDevice;
export declare class InsteonRelayDevice extends InsteonRelayDevice_base implements MapsTo<typeof OnOffBehavior> {
    constructor(isy: ISY, node: NodeInfo);
    initialize(endpoint: EndpointFor<typeof OnOffBehavior>): Promise<void>;
    handlePropertyChange(propertyName: string, value: any, formattedValue: string): boolean;
    sendBeep(level?: number): Promise<any>;
}
export {};
//# sourceMappingURL=InsteonRelayDevice.d.ts.map
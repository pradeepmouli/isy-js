import { ISY } from '../../ISY.js';
import { NodeInfo } from '../../Definitions/NodeInfo.js';
import { MapsTo } from '../MapsTo.js';
import { EndpointFor } from '../EndpointFor.js';
import { InsteonBaseDevice } from './InsteonBaseDevice.js';
import type { OnOffBehavior } from '@project-chip/matter.js/behaviors/on-off';
import 'winston';
import { Driver, DriverType } from '../../Definitions/Global/Drivers.js';
declare const InsteonRelayDevice_base: {
    new (...args: any[]): {
        local: import("../../ISYNode.js").DriverValues<DriverType.Status | Driver.Literal>;
        formatted: import("../../ISYNode.js").DriverValues<DriverType.Status | Driver.Literal, string>;
        pending: import("../../ISYNode.js").DriverValues<DriverType.Status | Driver.Literal>;
        get state(): Promise<boolean>;
        set state(value: boolean);
        On(): Promise<any>;
        Off(): Promise<any>;
        updateState(state: boolean): Promise<any>;
        logger(arg0: string): unknown;
        handleEvent(evt: any): unknown;
        on(arg0: string, arg1: any): unknown;
        name: any;
        uom: { [x in Driver.Literal]?: import("../../Definitions/Global/UOM.js").UnitOfMeasure; };
        drivers: import("../../Definitions/Global/Drivers.js").DriverList<Driver.Literal>;
        address: string;
        family: import("../../ISY.js").Family;
        typeCode: string;
        deviceClass: any;
        parentAddress: any;
        category: number;
        subCategory: number;
        type: any;
        _parentDevice: import("../../ISYNode.js").ISYNodeDevice<import("../../ISY.js").Family, Driver.Literal, string>;
        children: import("../../ISYNode.js").ISYNodeDevice<import("../../ISY.js").Family, Driver.Literal, string>[];
        scenes: import("../../ISYScene.js").ISYScene[];
        hidden: boolean;
        enabled: boolean;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        label: string;
        convertTo(value: any, UnitOfMeasure: number): any;
        convertTo(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
        convertFrom(value: any, UnitOfMeasure: number): any;
        convertFrom(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
        addLink(isyScene: import("../../ISYScene.js").ISYScene): void;
        addChild(childDevice: import("../../ISYNode.js").ISYNodeDevice<import("../../ISY.js").Family, Driver.Literal, string>): void;
        readProperty(propertyName: Driver.Literal): Promise<import("../../Definitions/PropertyStatus.js").DriverState>;
        readProperties(): Promise<import("../../Definitions/PropertyStatus.js").DriverState[]>;
        updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
        sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        refreshNotes(): Promise<void>;
        parseResult(node: {
            property: import("../../Definitions/PropertyStatus.js").DriverState | import("../../Definitions/PropertyStatus.js").DriverState[];
        }): void;
        handleControlTrigger(controlName: string): boolean;
        handlePropertyChange(propertyName: Driver.Literal, value: any, formattedValue: string): boolean;
    };
} & typeof InsteonBaseDevice;
export declare class InsteonRelayDevice extends InsteonRelayDevice_base implements MapsTo<typeof OnOffBehavior> {
    constructor(isy: ISY, node: NodeInfo);
    initialize(endpoint: EndpointFor<typeof OnOffBehavior>): Promise<void>;
    handlePropertyChange(propertyName: string, value: any, formattedValue: string): boolean;
    sendBeep(level?: number): Promise<any>;
}
export {};

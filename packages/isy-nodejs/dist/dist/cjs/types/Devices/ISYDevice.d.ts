import { Family } from '../Definitions/Global/Families.js';
import { EndpointType, MutableEndpoint } from '@project-chip/matter.js/endpoint/type';
import { Endpoint } from '@project-chip/matter.js/endpoint';
import { SupportedBehaviors } from '@project-chip/matter.js/endpoint/properties';
import { ClusterBehavior } from '@project-chip/matter.js/behavior/cluster';
import 'winston';
import { ISYNodeDevice, type DriverValues, type ISYDevice } from '../ISYNode.js';
import { Constructor } from './Constructor.js';
import { UnitOfMeasure } from '../Definitions/Global/UOM.js';
import { DriverType, type Driver } from '../Definitions/Global/Drivers.js';
export declare const ISYBinaryStateDevice: <K extends Family, D extends Driver.Literal, T extends Constructor<ISYNodeDevice<K, D | "ST", any>>>(Base: T) => {
    new (...args: any[]): {
        readonly state: Promise<boolean>;
        convertTo(value: any, uom: UnitOfMeasure, propertyName?: D): boolean;
        convertFrom(value: any, uom: number, propertyName?: D): number;
        family: K;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly parentAddress: any;
        readonly category: number;
        readonly subCategory: number;
        readonly type: any;
        _parentDevice: ISYNodeDevice<K, Driver.Literal, string>;
        readonly children: ISYNodeDevice<K, Driver.Literal, string>[];
        readonly scenes: import("../ISYScene.js").ISYScene[];
        hidden: boolean;
        _enabled: any;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        addLink(isyScene: import("../ISYScene.js").ISYScene): void;
        addChild<K_1 extends ISYNodeDevice<K, any, any>>(childDevice: K_1): void;
        readonly parentDevice: ISYNodeDevice<K, Driver.Literal, string>;
        readProperty(propertyName: Driver.Literal): Promise<import("../Definitions/PropertyStatus.js").DriverState>;
        readProperties(): Promise<import("../Definitions/PropertyStatus.js").DriverState[]>;
        updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
        sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        parseResult(node: {
            property: import("../Definitions/PropertyStatus.js").DriverState | import("../Definitions/PropertyStatus.js").DriverState[];
        }): void;
        applyStatus(prop: import("../Definitions/PropertyStatus.js").DriverState): void;
        handleControlTrigger(controlName: string): boolean;
        handlePropertyChange(driver: any, value: any, formattedValue: string): boolean;
        readonly isy: import("../ISY.js").ISY;
        readonly formatted: DriverValues<"ST" | D, string>;
        readonly uom: { [x in Driver.Literal]?: UnitOfMeasure; };
        readonly pending: DriverValues<"ST" | D, any>;
        readonly local: DriverValues<"ST" | D, any>;
        readonly drivers: import("../Definitions/Global/Drivers.js").DriverList<"ST" | D>;
        readonly flag: any;
        readonly nodeDefId: string;
        readonly address: string;
        name: string;
        label: string;
        spokenName: string;
        location: string;
        isLoad: boolean;
        folder: string;
        parent: any;
        parentType: import("../ISYConstants.js").NodeType;
        readonly elkId: string;
        nodeType: number;
        readonly baseLabel: string;
        propsInitialized: boolean;
        logger: (msg: any, level?: "error" | "warn" | "debug" | "info", ...meta: any[]) => import("winston").Logger;
        lastChanged: Date;
        enabled: boolean;
        baseName: any;
        on(event: "PropertyChanged" | "ControlTriggered", listener: ((propertyName: string, newValue: any, oldValue: any, formattedValue: string) => any) | ((controlName: string) => any)): any;
        emit(event: "PropertyChanged" | "ControlTriggered", propertyName?: string, newValue?: any, oldValue?: any, formattedValue?: string, controlName?: string): boolean;
        handleEvent(event: {
            control?: any;
            data?: any;
            node?: any;
            action?: any;
            fmtAct?: any;
        }): boolean;
        generateLabel(template: string): string;
        refreshNotes(): Promise<void>;
        getNotes(): Promise<import("../ISYNode.js").NodeNotes>;
        [EventEmitter.captureRejectionSymbol]?(error: Error, event: string, ...args: any[]): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol, listener?: Function): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): Array<string | symbol>;
    };
} & T;
export interface ISYBinaryStateDevice {
    get state(): Promise<boolean>;
}
export declare const ISYUpdateableBinaryStateDevice: <K extends Family, D extends Driver.Literal, C extends string, T extends Constructor<ISYDevice<K, D, C | "DON" | "DOF">>>(Base: T) => {
    new (...args: any[]): {
        local: DriverValues<D | DriverType.Status>;
        formatted: DriverValues<D | DriverType.Status, string>;
        pending: DriverValues<D | DriverType.Status>;
        get state(): Promise<boolean>;
        set state(value: boolean);
        On(): Promise<any>;
        Off(): Promise<any>;
        updateState(state: boolean): Promise<any>;
        logger(arg0: string): unknown;
        handleEvent(evt: any): unknown;
        on(arg0: string, arg1: any): unknown;
        name: any;
        uom: { [x in Driver.Literal]?: UnitOfMeasure; };
        drivers: import("../Definitions/Global/Drivers.js").DriverList<D>;
        address: string;
        family: K;
        typeCode: string;
        deviceClass: any;
        parentAddress: any;
        category: number;
        subCategory: number;
        type: any;
        _parentDevice: ISYNodeDevice<K, Driver.Literal, string>;
        children: ISYNodeDevice<K, Driver.Literal, string>[];
        scenes: import("../ISYScene.js").ISYScene[];
        hidden: boolean;
        enabled: boolean;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        label: string;
        convertTo(value: any, UnitOfMeasure: number): any;
        convertTo(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
        convertFrom(value: any, UnitOfMeasure: number): any;
        convertFrom(value: any, UnitOfMeasure: number, propertyName: Driver.Literal): any;
        addLink(isyScene: import("../ISYScene.js").ISYScene): void;
        addChild(childDevice: ISYNodeDevice<K, Driver.Literal, string>): void;
        readProperty(propertyName: D): Promise<import("../Definitions/PropertyStatus.js").DriverState>;
        readProperties(): Promise<import("../Definitions/PropertyStatus.js").DriverState[]>;
        updateProperty(propertyName: D, value: string): Promise<any>;
        sendCommand(command: "DON" | "DOF" | C, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        refreshNotes(): Promise<void>;
        parseResult(node: {
            property: import("../Definitions/PropertyStatus.js").DriverState | import("../Definitions/PropertyStatus.js").DriverState[];
        }): void;
        handleControlTrigger(controlName: "DON" | "DOF" | C): boolean;
        handlePropertyChange(propertyName: D, value: any, formattedValue: string): boolean;
    };
} & T;
export interface MapsToEndpointType<T extends EndpointType> {
    initialize(endpoint: Endpoint<T>): void;
}
type BehaviorList<T extends ClusterBehavior> = SupportedBehaviors & T;
export interface MapsToEndpoint<T extends ClusterBehavior> {
    initialize<K extends MutableEndpoint.With<EndpointType.Empty, BehaviorList<T>>>(endpoint: Endpoint<K>): void;
}
export declare const ISYLevelDevice: <T extends Constructor<ISYNodeDevice<any, any, any>>>(base: T) => {
    new (...args: any[]): {
        readonly level: number;
        family: any;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly parentAddress: any;
        readonly category: number;
        readonly subCategory: number;
        readonly type: any;
        _parentDevice: ISYNodeDevice<any, Driver.Literal, string>;
        readonly children: ISYNodeDevice<any, Driver.Literal, string>[];
        readonly scenes: import("../ISYScene.js").ISYScene[];
        hidden: boolean;
        _enabled: any;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        convertTo(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): any;
        convertFrom(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): any;
        addLink(isyScene: import("../ISYScene.js").ISYScene): void;
        addChild<K extends ISYNodeDevice<any, any, any>>(childDevice: K): void;
        readonly parentDevice: ISYNodeDevice<any, Driver.Literal, string>;
        readProperty(propertyName: Driver.Literal): Promise<import("../Definitions/PropertyStatus.js").DriverState>;
        readProperties(): Promise<import("../Definitions/PropertyStatus.js").DriverState[]>;
        updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
        sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        parseResult(node: {
            property: import("../Definitions/PropertyStatus.js").DriverState | import("../Definitions/PropertyStatus.js").DriverState[];
        }): void;
        applyStatus(prop: import("../Definitions/PropertyStatus.js").DriverState): void;
        handleControlTrigger(controlName: string): boolean;
        handlePropertyChange(driver: any, value: any, formattedValue: string): boolean;
        readonly isy: import("../ISY.js").ISY;
        readonly formatted: DriverValues<any, string>;
        readonly uom: { [x in Driver.Literal]?: UnitOfMeasure; };
        readonly pending: DriverValues<any, any>;
        readonly local: DriverValues<any, any>;
        readonly drivers: import("../Definitions/Global/Drivers.js").DriverList<any>;
        readonly flag: any;
        readonly nodeDefId: string;
        readonly address: string;
        name: string;
        label: string;
        spokenName: string;
        location: string;
        isLoad: boolean;
        folder: string;
        parent: any;
        parentType: import("../ISYConstants.js").NodeType;
        readonly elkId: string;
        nodeType: number;
        readonly baseLabel: string;
        propsInitialized: boolean;
        logger: (msg: any, level?: "error" | "warn" | "debug" | "info", ...meta: any[]) => import("winston").Logger;
        lastChanged: Date;
        enabled: boolean;
        baseName: any;
        on(event: "PropertyChanged" | "ControlTriggered", listener: ((propertyName: string, newValue: any, oldValue: any, formattedValue: string) => any) | ((controlName: string) => any)): any;
        emit(event: "PropertyChanged" | "ControlTriggered", propertyName?: string, newValue?: any, oldValue?: any, formattedValue?: string, controlName?: string): boolean;
        handleEvent(event: {
            control?: any;
            data?: any;
            node?: any;
            action?: any;
            fmtAct?: any;
        }): boolean;
        generateLabel(template: string): string;
        refreshNotes(): Promise<void>;
        getNotes(): Promise<import("../ISYNode.js").NodeNotes>;
        [EventEmitter.captureRejectionSymbol]?(error: Error, event: string, ...args: any[]): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol, listener?: Function): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): Array<string | symbol>;
    };
} & T;
export declare const ISYUpdateableLevelDevice: <T extends Constructor<ISYNodeDevice<any, any, any>>>(base: T) => {
    new (...args: any[]): {
        readonly level: number;
        updateLevel(level: number): Promise<any>;
        family: any;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly parentAddress: any;
        readonly category: number;
        readonly subCategory: number;
        readonly type: any;
        _parentDevice: ISYNodeDevice<any, Driver.Literal, string>;
        readonly children: ISYNodeDevice<any, Driver.Literal, string>[];
        readonly scenes: import("../ISYScene.js").ISYScene[];
        hidden: boolean;
        _enabled: any;
        productName: string;
        model: string;
        modelNumber: string;
        version: string;
        isDimmable: boolean;
        convertTo(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): any;
        convertFrom(value: any, UnitOfMeasure: number, propertyName?: Driver.Literal): any;
        addLink(isyScene: import("../ISYScene.js").ISYScene): void;
        addChild<K extends ISYNodeDevice<any, any, any>>(childDevice: K): void;
        readonly parentDevice: ISYNodeDevice<any, Driver.Literal, string>;
        readProperty(propertyName: Driver.Literal): Promise<import("../Definitions/PropertyStatus.js").DriverState>;
        readProperties(): Promise<import("../Definitions/PropertyStatus.js").DriverState[]>;
        updateProperty(propertyName: Driver.Literal, value: string): Promise<any>;
        sendCommand(command: string, parameters?: Record<string | symbol, string | number> | string | number): Promise<any>;
        refresh(): Promise<any>;
        parseResult(node: {
            property: import("../Definitions/PropertyStatus.js").DriverState | import("../Definitions/PropertyStatus.js").DriverState[];
        }): void;
        applyStatus(prop: import("../Definitions/PropertyStatus.js").DriverState): void;
        handleControlTrigger(controlName: string): boolean;
        handlePropertyChange(driver: any, value: any, formattedValue: string): boolean;
        readonly isy: import("../ISY.js").ISY;
        readonly formatted: DriverValues<any, string>;
        readonly uom: { [x in Driver.Literal]?: UnitOfMeasure; };
        readonly pending: DriverValues<any, any>;
        readonly local: DriverValues<any, any>;
        readonly drivers: import("../Definitions/Global/Drivers.js").DriverList<any>;
        readonly flag: any;
        readonly nodeDefId: string;
        readonly address: string;
        name: string;
        label: string;
        spokenName: string;
        location: string;
        isLoad: boolean;
        folder: string;
        parent: any;
        parentType: import("../ISYConstants.js").NodeType;
        readonly elkId: string;
        nodeType: number;
        readonly baseLabel: string;
        propsInitialized: boolean;
        logger: (msg: any, level?: "error" | "warn" | "debug" | "info", ...meta: any[]) => import("winston").Logger;
        lastChanged: Date;
        enabled: boolean;
        baseName: any;
        on(event: "PropertyChanged" | "ControlTriggered", listener: ((propertyName: string, newValue: any, oldValue: any, formattedValue: string) => any) | ((controlName: string) => any)): any;
        emit(event: "PropertyChanged" | "ControlTriggered", propertyName?: string, newValue?: any, oldValue?: any, formattedValue?: string, controlName?: string): boolean;
        handleEvent(event: {
            control?: any;
            data?: any;
            node?: any;
            action?: any;
            fmtAct?: any;
        }): boolean;
        generateLabel(template: string): string;
        refreshNotes(): Promise<void>;
        getNotes(): Promise<import("../ISYNode.js").NodeNotes>;
        [EventEmitter.captureRejectionSymbol]?(error: Error, event: string, ...args: any[]): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol, listener?: Function): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): Array<string | symbol>;
    };
} & T;
export {};

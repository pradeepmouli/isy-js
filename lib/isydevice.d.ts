/// <reference types="node" />
import { ISY } from './isy';
import { ISYNode } from './isynode';
import { ISYScene } from './isyscene';
export declare class ISYDevice extends ISYNode {
    readonly typeCode: string;
    readonly deviceClass: any;
    readonly parentAddress: any;
    readonly category: number;
    readonly subCategory: number;
    readonly type: any;
    _parentDevice: ISYDevice;
    readonly scenes: ISYScene[];
    readonly formatted: any[string];
    readonly uom: any[string];
    readonly pending: any[string];
    constructor(isy: ISY, node: any);
    convertTo(value: any, uom: number): any;
    convertFrom(value: any, uom: number): any;
    addLink(isyScene: ISYScene): void;
    readonly parentDevice: ISYDevice;
    updateProperty(propertyName: any, value: any): Promise<any>;
    sendCommand(command: any, ...parameters: any[]): Promise<any>;
    refresh(): Promise<any>;
    handlePropertyChange(propertyName: any, value: any, formattedValue: any): boolean;
}
declare type Constructor<T> = new (...args: any[]) => T;
export declare const ISYBinaryStateDevice: <T extends Constructor<ISYDevice>>(Base: T) => {
    new (...args: any[]): {
        [x: string]: any;
        ST: number;
        readonly state: boolean;
        updateState(state: boolean): Promise<any>;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly parentAddress: any;
        readonly category: number;
        readonly subCategory: number;
        readonly type: any;
        _parentDevice: ISYDevice;
        readonly scenes: ISYScene[];
        readonly formatted: any;
        readonly uom: any;
        readonly pending: any;
        convertTo(value: any, uom: number): any;
        convertFrom(value: any, uom: number): any;
        addLink(isyScene: ISYScene): void;
        readonly parentDevice: ISYDevice;
        updateProperty(propertyName: any, value: any): Promise<any>;
        sendCommand(command: any, ...parameters: any[]): Promise<any>;
        refresh(): Promise<any>;
        handlePropertyChange(propertyName: any, value: any, formattedValue: any): boolean;
        readonly isy: ISY;
        readonly flag: any;
        readonly nodeDefId: string;
        readonly address: string;
        name: string;
        family: any;
        parent: any;
        readonly elkId: string;
        nodeType: number;
        propertyChanged: import("events").EventEmitter;
        propsInitialized: boolean;
        logger: (msg: any) => void;
        lastChanged: Date;
        enabled: boolean;
        handleEvent(event: any): boolean;
        onPropertyChanged(propertyName: any, callback: any): void;
    };
} & T;
export declare const ISYLevelDevice: <T extends Constructor<ISYDevice>>(base: T) => {
    new (...args: any[]): {
        [x: string]: any;
        ST: number;
        readonly level: number;
        updateLevel(level: number): Promise<any>;
        readonly typeCode: string;
        readonly deviceClass: any;
        readonly parentAddress: any;
        readonly category: number;
        readonly subCategory: number;
        readonly type: any;
        _parentDevice: ISYDevice;
        readonly scenes: ISYScene[];
        readonly formatted: any;
        readonly uom: any;
        readonly pending: any;
        convertTo(value: any, uom: number): any;
        convertFrom(value: any, uom: number): any;
        addLink(isyScene: ISYScene): void;
        readonly parentDevice: ISYDevice;
        updateProperty(propertyName: any, value: any): Promise<any>;
        sendCommand(command: any, ...parameters: any[]): Promise<any>;
        refresh(): Promise<any>;
        handlePropertyChange(propertyName: any, value: any, formattedValue: any): boolean;
        readonly isy: ISY;
        readonly flag: any;
        readonly nodeDefId: string;
        readonly address: string;
        name: string;
        family: any;
        parent: any;
        readonly elkId: string;
        nodeType: number;
        propertyChanged: import("events").EventEmitter;
        propsInitialized: boolean;
        logger: (msg: any) => void;
        lastChanged: Date;
        enabled: boolean;
        handleEvent(event: any): boolean;
        onPropertyChanged(propertyName: any, callback: any): void;
    };
} & T;
export {};
